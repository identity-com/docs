"use strict";(self.webpackChunkidentity_docs=self.webpackChunkidentity_docs||[]).push([[2452],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=l(n),u=o,y=h["".concat(c,".").concat(u)]||h[u]||p[u]||r;return n?a.createElement(y,i(i({ref:t},d),{},{components:n})):a.createElement(y,i({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6009:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var a=n(3117),o=n(102),r=(n(7294),n(3905)),i=["components"],s={sidebar_position:3},c="Tutorial",l={unversionedId:"tutorial/gateway-protocol",id:"tutorial/gateway-protocol",title:"Tutorial",description:"Github:",source:"@site/docs/tutorial/gateway-protocol.md",sourceDirName:"tutorial",slug:"/tutorial/gateway-protocol",permalink:"/docs/tutorial/gateway-protocol",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/gateway-protocol.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Sol-Did",permalink:"/docs/sol-did/"}},d={},p=[{value:"How to install identity&#39;s Gateway CLI",id:"how-to-install-identitys-gateway-cli",level:2},{value:"How to run the pass verify command",id:"how-to-run-the-pass-verify-command",level:2}],h={toc:p};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"tutorial"},"Tutorial"),(0,r.kt)("p",null,"Github: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/identity-com/identity-challenge"},"https://github.com/identity-com/identity-challenge")),(0,r.kt)("p",null,"In this tutorial, we will walk through the steps to issue a gateway pass to the user."),(0,r.kt)("p",null,"First, to make a solana transaction, we will create a new wallet and fund it with SOL."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"\n// The airdrop function takes in a connection and a PublicKey object representing an account, and an optional amount parameter, and uses the requestAirdrop and confirmTransaction methods provided by the Connection object to perform an airdrop on the specified account with the specified amount.\n\nimport { Connection, PublicKey, LAMPORTS_PER_SOL } from '@solana/web3.js';\n\nconst airdrop = async (\n  connection: Connection,\n  account: PublicKey,\n  amount = LAMPORTS_PER_SOL\n) => {\n  // Request an airdrop for the specified account with the specified amount  \n  const sigAirdrop = await connection.requestAirdrop(account, amount);\n  // Get the latest block hash from the connection\n  const latestBlockHash = await connection.getLatestBlockhash();\n\n  await connection.confirmTransaction({\n    signature: sigAirdrop,\n    blockhash: latestBlockHash.blockhash,\n    lastValidBlockHeight: latestBlockHash.lastValidBlockHeight,\n  });\n};\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"import the Connection, PublicKey, and LAMPORTS_PER_SOL types from the @solana/web3.js package."),(0,r.kt)("li",{parentName:"ol"},"Define an airdrop function that takes in a connection of type Connection, an account of type PublicKey, and an optional amount of type number which defaults to LAMPORTS_PER_SOL."),(0,r.kt)("li",{parentName:"ol"},"Use the requestAirdrop method provided by the connection object to request an airdrop on the specified account with the specified amount."),(0,r.kt)("li",{parentName:"ol"},"Use the getLatestBlockhash method provided by the connection object to get the latest blockhash on the chain."),(0,r.kt)("li",{parentName:"ol"},"Use the confirmTransaction method provided by the connection object to confirm the airdrop transaction, passing in the signature returned by the requestAirdrop method, the blockhash, and the lastValidBlockHeight obtained from the latestBlockHash object as arguments.")),(0,r.kt)("p",null,"Second, set up a required middleware cryptid."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'\n// The setupCryptid function takes in a Wallet object representing an authority, and a Connection object, and returns a CryptidClient object. The function first initializes an array of middleware programs that need to be passed to the CryptidClient object, then uses the Cryptid.buildFromDID method to build a CryptidClient object, passing in the DID identifier, authority wallet, and middleware programs as arguments.\n\nconst setupCryptid = async (authority: Wallet, connection: Connection): Promise<CryptidClient> => {\n  // Required Middleware to pass challenge Program\n  const middleware = [\n    {\n      programId: CHECK_DID_MIDDLEWARE_PROGRAM_ID,\n      address: new PublicKey("79Rca2Uu11RJ6i7fbFQPvm2kbTWEEJnzsm8RmWVGwbnB"),\n    },\n  ];\n\n  return Cryptid.buildFromDID(\n    DidSolIdentifier.create(authority.publicKey, cluster).toString(),\n    authority,\n    // middleware,\n    { connection, accountIndex: 1, middlewares: middleware }\n  );\n}\n')),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Define the function with the required parameters: authority of type Wallet and connection of type Connection."),(0,r.kt)("li",{parentName:"ol"},"Create an array of middleware and assign it to the middleware variable: an object with the programId and address properties."),(0,r.kt)("li",{parentName:"ol"},"Return a CryptidClient object that is built using the Cryptid class and the buildFromDID method: pass in the DID identifier, authority wallet, and middleware programs as arguments."),(0,r.kt)("li",{parentName:"ol"},"Use the setupCryptid function by passing in a Wallet object for the authority parameter and a Connection object for the connection parameter to initialize a CryptidClient object.")),(0,r.kt)("p",null,"This will return a Promise that will resolve to a CryptidClient object."),(0,r.kt)("p",null,"Third, we will propose and execute the transaction."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"\n// The proposeAndExecute function takes in a Transaction object and a CryptidClient object, and logs the transaction and the proposeTransaction and proposeSigners returned by the cryptid.propose method. It then sends the propose transaction to the network, skipping the preflight check. It then sends the executeTransactions and executeSigners returned by the cryptid.execute method to the network.\n\nconst proposeAndExecute = async (tx: Transaction, cryptid: CryptidClient) => {\n  console.log(JSON.stringify(tx, null, 2));\n  const { proposeTransaction, transactionAccount, proposeSigners } =\n    await cryptid.propose(tx);\n  console.log(`proposeTransaction: ${JSON.stringify(proposeTransaction, null, 2)}`);\n  console.log(`proposeSigners: ${proposeSigners}`);\n  await cryptid.send(proposeTransaction, proposeSigners, { skipPreflight: true });\n\n  // send the execute tx, which fails to pass through the middleware\n  const { executeTransactions, executeSigners } = await cryptid.execute(\n    transactionAccount\n  );\n  await cryptid.send(executeTransactions[0], executeSigners);\n}\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Define the function with the required parameters: tx of type Transaction and cryptid of type CryptidClient."),(0,r.kt)("li",{parentName:"ol"},"Use the propose method of the cryptid object to create a proposal for the transaction and log the proposal transaction and signers to the console: the proposeTransaction, transactionAccount, and proposeSigners objects returned by the cryptid.propose method."),(0,r.kt)("li",{parentName:"ol"},"Use the send method of the cryptid object to send the proposal transaction, passing in the proposeSigners and setting the skipPreflight option to true: this will send the transaction to the network without performing a preflight check."),(0,r.kt)("li",{parentName:"ol"},"Use the execute method of the cryptid object to create an execution transaction for the proposed transaction, and log the execution transaction and signers to the console: the executeTransactions and executeSigners objects returned by the cryptid.execute method."),(0,r.kt)("li",{parentName:"ol"},"Use the send method of the cryptid object to send the execute transaction, passing in the transaction and the list of signers as arguments: this will send the transaction to the network.")),(0,r.kt)("p",null,"Fourth, we will add Eth Key to the user's DID."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"\n// The addEthKeyWithOwnershipToDID function takes in a Wallet object representing an authority, and adds an Ethereum key to the authority's DID. The function first creates a DID wallet and a key verification method, then adds the verification method to the DID using the didSolService.addVerificationMethod method, and sets the ownership flags on the verification method using the didSolService.setVerificationMethodFlags method.\n\nexport const addEthKeyWithOwnershipToDID = async (authority: Wallet) => {\n  const did = DidSolIdentifier.create(authority.publicKey, cluster);\n  const didSolService = DidSolService.build(did, {\n    wallet: authority,\n  });\n\n  // Create a DID Wallet\n  const newEthKey = EthWallet.createRandom();\n  const fragment = `eth-key${Date.now()}`;\n  const newKeyVerificationMethod = {\n    flags: [BitwiseVerificationMethodFlag.CapabilityInvocation],\n    fragment,\n    keyData: Buffer.from(utils.arrayify(newEthKey.address)),\n    methodType: VerificationMethodType.EcdsaSecp256k1RecoveryMethod2020,\n  };\n\n  // Set VM\n  await didSolService.addVerificationMethod(newKeyVerificationMethod).withAutomaticAlloc(authority.publicKey).rpc();\n\n  // Set Ownership flags\n  await didSolService\n    .setVerificationMethodFlags(fragment, [\n      BitwiseVerificationMethodFlag.CapabilityInvocation,\n      BitwiseVerificationMethodFlag.OwnershipProof,\n    ])\n    .withEthSigner(newEthKey)\n    .rpc();\n};\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Import the addEthKeyWithOwnershipToDID function and the necessary dependencies (e.g. Wallet, DidSolIdentifier, DidSolService, EthWallet, etc.) at the top of your file."),(0,r.kt)("li",{parentName:"ol"},"Create a new Wallet object representing the authority that will be used to create the new DID."),(0,r.kt)("li",{parentName:"ol"},"Call the addEthKeyWithOwnershipToDID function, passing in the authority object as an argument."),(0,r.kt)("li",{parentName:"ol"},"This will create a new DID based on the authority object's publicKey, and add a new Ethereum key with ownership proof to it. The updated DID will then be sent to an RPC endpoint."),(0,r.kt)("li",{parentName:"ol"},"You can now use the updated DID and its associated Ethereum key for any operations that require ownership proof.")),(0,r.kt)("p",null,"Fifth, we will add service to the user's DID."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"\n// The addServiceToDID function which takes in a Wallet object representing an authority, and a Service object, and adds the service to the authority's DID using the didSolService.addService method.\n\nexport const addServiceToDID = async (authority: Wallet, service: Service) => {\n  const did = DidSolIdentifier.create(authority.publicKey, cluster);\n  const didSolService = DidSolService.build(did, {\n    wallet: authority,\n  });\n\n  await didSolService.addService(service).withAutomaticAlloc(authority.publicKey).rpc();\n};\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Import the addServiceToDID function and the necessary dependencies (e.g. Wallet, DidSolIdentifier, DidSolService, Service, etc.) at the top of your file.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a new Wallet object representing the authority that will be used to add the service to the DID.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a new Service object representing the service that you want to add to the DID.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Call the addServiceToDID function, passing in the authority and service objects as arguments.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"This will add the service to the DID associated with the authority object, and then send the updated DID to an RPC endpoint.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"You can now use the updated DID with the added service for any operations that require that service."))),(0,r.kt)("p",null,"Once we have done all the steps, we will have a gateway pass issued to the user."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'\n(async () => {\n  const connection = new Connection(clusterApiUrl(cluster));\n  const connection = new Connection("https://rough-misty-night.solana-devnet.quiknode.pro/b57300ff234c12e95763e9b8cda67e9d86772a0d/")\n\n  // generate an authority and airdrop to it.\n  console.log(\'Setting up authority\');\n  const subject = Keypair.generate();\n  // const authority = Keypair.generate();\n  const authority = Keypair.fromSecretKey(Uint8Array.from([89,148,162,75,114,98,180,107,191,170,103,35,203,84,199,180,245,219,130,213,32,66,30,8,17,222,61,92,136,75,87,255,134,47,101,203,156,252,88,184,66,77,86,129,132,84,62,193,4,37,6,36,15,118,82,153,198,2,138,90,237,68,219,250]));\n  const wallet = new NodeWallet(authority)\n  // await airdrop(connection, authority.publicKey);\n\n  const client = IdentityChallengeClient.build({\n    // the network\n    network: new PublicKey("cha3u755qh8GbDayALBwA7ZroFT4NHfPUYgERp16M1z"),\n    // the Gatekeeper\n    gatekeeper: new PublicKey("43tZqtJB8fZvHe4BgKJFxZU1pDaiTeBBES9DVLjbPATg"),\n    // PDA of the challenge Program that is authorized to issue for the gatekeeper\n    gatekeeperAuthority: new PublicKey("yQZBNHqdsquLZKfsUfNMcJqrS9F9rAw5oCEqJAH67MN")\n  }, cluster, {\n    connection,\n    wallet\n  });\n\n  console.log(\'Setting up Cryptid\');\n  // Create Cryptid Account that uses middleware\n  const cryptid = await setupCryptid(wallet, connection);\n  console.log(`cryptid DID: ${cryptid.did}`);\n  console.log(`cryptid address: ${cryptid.address()}`);\n\n  await airdrop(connection, cryptid.address());\n\n  await addEthKeyWithOwnershipToDID(wallet);\n  await addServiceToDID(wallet, {\n    fragment: "test-service",\n    serviceType: "profile-pic",\n    serviceEndpoint:\n      "https://tenor.com/view/vendetta-hats-off-fat-gif-11654529",\n  });\n\n\n  console.log(\'Executing Transaction\');\n  const tx = await client.issuePass(cryptid.address(), subject.publicKey);\n  // Create issue Transaction\n  await proposeAndExecute(tx, cryptid);\n\n  console.log(`Successfully issued a pass to ${subject.publicKey}`);\n\n})().catch(console.error)\n')),(0,r.kt)("p",null,"We can now verify that the pass has been issued to the user by running gateway pass verify command from the Identity's Gateway Command Line Interface."),(0,r.kt)("h2",{id:"how-to-install-identitys-gateway-cli"},"How to install identity's Gateway CLI"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g @identity.com/gateway-solana-cli\n")),(0,r.kt)("h2",{id:"how-to-run-the-pass-verify-command"},"How to run the pass verify command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"USAGE\n  $ gateway pass verify -s <value> -n <value> -c <value> [-h]\n\nFLAGS\n  -c, --cluster=<value>  (required) The cluster you wish to use\n  -h, --help             Show CLI help.\n  -n, --network=<value>  (required) String representing the network's address\n  -s, --subject=<value>  (required) The address to check for a gateway pass\n\nDESCRIPTION\n  Verifies a gateway pass\n\nEXAMPLES\n  $ gateway pass verify --subject [address] --network [address] --cluster [cluster type]\n")),(0,r.kt)("h1",{id:"payments"},"Payments"),(0,r.kt)("p",null,"When doing a pass operation, the user will be charged a fee. The fee is paid in the supported token(s) that the network and gatekeepers support.\nWe specify the fees and the supported tokens when creating networks and gatekeepers. But can be updated later."),(0,r.kt)("p",null,"The fees are specified as follows\nThe gatekeeper specifies a fee in token units, while the network specifies a percentage in hundredths of a percent (0.01% or 0.0001).\nFor example:\nThe gatekeeper fee is 100 and the network percentage is 500 (5%)\nThe gatekeeper will receive 95 and the network will receive 5."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"fees.token")," for network and ",(0,r.kt)("inlineCode",{parentName:"p"},"tokenFees.token")," for gatekeeper must match ",(0,r.kt)("inlineCode",{parentName:"p"},"supportedTokens.key"),", order doesn't matter.\nThe network and the gatekeeper must have at least one matching token to do a pass operation.\nYou can specify a different fee for each pass operation issue, refresh, expire and verify."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"  createNetwork({\n    authThreshold: 1,\n    passExpireTime: 10000,\n    fees: [\n      {\n        token: mint,\n        issue: 10,\n        refresh: 10,\n        expire: 10,\n        verify: 10,\n      },\n    ],\n    supportedTokens: [{ key: mint }],\n    authKeys: [],\n  });\n\ncreateGatekeeper(\n  networkAuthority.publicKey,\n  stakingPDA,\n  adminAuthority.publicKey, \n  {\n    tokenFees: [\n      {\n        token: mint,\n        issue: 10,\n        refresh: 10,\n        expire: 10,\n        verify: 10,\n      },\n    ],\n    authThreshold: 1,\n    authKeys: [], \n    supportedTokens: [{key: mint}],\n  });\n  \n")))}u.isMDXComponent=!0}}]);